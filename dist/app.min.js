const path = require("path"), url = require("url"), express = require("express"), http = require("http"), socketio = require("socket.io"), imgpath = require("./image.js"), { userJoin, getCurrentUser, userLeave, getRoomUsers } = require("./Users.js"), app = express(), server = http.createServer(app), io = socketio(server, { pingTimeout: 6e4 }), rooms = ["General", "Server2", "Server3", "Server4", "Server5", "Server6", "Server7"]; let loginMsg = "", loginClass = ""; app.use(express.static(path.join(__dirname, "views/"))), app.use(express.json()), app.set("view engine", "ejs"), io.on("connection", s => { s.on("joinRoom", ({ username: e, room: r }) => { var o = rooms.includes(r); o ? (e = userJoin(s.id, e, r), s.join(e.room), console.log("New User connected!!"), loginMsg = "", loginClass = "", io.to(e.room).emit("roomUsers", { room: e.room, users: getRoomUsers(e.room), status: !0 })) : (io.to("" + s.id).emit("wrong_Room", o), loginMsg = "You tried to login in an un-registered room", loginClass = "msg") }), s.on("canvas-image", e => { var r = getCurrentUser(s.id); r ? s.broadcast.to(r.room).emit("canvas-draw", e) : (s.emit("wrong_Room", !1), loginMsg = "You were logged out due to an error", loginClass = "msg") }), s.on("canvas-clear", e => { s.broadcast.emit("canvas-wipe", e) }), s.on("disconnect", () => { console.log("User left the app"); var e = userLeave(s.id); e && io.to(e.room).emit("roomUsers", { room: e.room, users: getRoomUsers(e.room), status: !1 }) }) }), app.get("/", (e, r) => { var o = { rooms: rooms, class: "" + loginClass, msg: "" + loginMsg }; r.render("login.ejs", { rooms: o }) }), app.get("/draw", (e, r) => { e = url.parse(e.url, !0).query, e = { username: e.username, room: e.room }; r.render("draw.ejs", { Qs: e }) }), app.get("/gallery", (e, r) => { var o = { ipath: imgpath }; r.render("gallery.ejs", { Image: o }) }), PORT = process.env.PORT || 3e3, server.listen(PORT, () => { console.log(`Listening on port ${PORT} ðŸš€`) });